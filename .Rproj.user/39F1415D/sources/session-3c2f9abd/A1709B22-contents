---
output:
  github_document
# output:
#   pdf_document:
#     latex_engine: xelatex
#     extra_dependencies: ["fontspec", "ctex"]
# fontsize: 12pt
# mainfont: SimSun
# header-includes:
#   - \usepackage{ctex}
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# Case

<!-- badges: start -->
<!-- badges: end -->

`Case`包是为了帮助实现教材中的各个案例所编写的程序包, 包含了实现如何复现iVX、如何预测股票波动率等目的的函数。

## 0 安装说明

``` {r}
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
```
## 1 数据集介绍
### 1.1 option_data
`option_data`数据集包含了自2015年2月9日至2024年5月21日的288756条期权数据，包括了交易日期、类型、到期日期、执行价以及收盘价，可用于计算中国波指iVX。数据样式如下:
```{r}
head(option_data)
```
### 1.2 iVX
`iVX`数据集包含了自2015年2月9日至2018年2月7日的739条中国波指iVX的数据，包括了日期和iVX的值，数据由同花顺公司提供，可用于与计算得到iVX进行对比。数据样式如下:
```{r}
head(iVX)
```
### 1.3 etf50
`etf50`数据集包含了自2017年1月3日至2023年12月29日的1701条上证50ETF的数据，包括了日期和上证50ETF的值，数据可由聚宽平台得到，可用于交易回测。数据样式如下:
```{r}
head(etf50)
```
### 1.4 moutai_data
`moutai_data`数据集包含了自2012年1月4日至2023年12月29日的1701条贵州茅台的五分钟高频数据，数据可从锐思数据得到。数据样式如下:
```{r}
moutai_data[1:10,(ncol(moutai_data)-1):ncol(moutai_data)]
```

## 2 案例一相关函数

### 2.1 iVXCalc()
`iVXCalc(data,rate)`函数可根据提供的期权数据，对中国波指iVX进行估计，其中`data`参数要求形式与`option_data`相同的数据框，`rate`可为常数或者与`data`中日期跨度相同长度的向量。下面为示例：
```{r,error=FALSE,warning=FALSE}
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
```
```{r}
head(na.omit(iVX_est)) # 输出iVX的估计结果
```

### 2.2 backtesting()
`backtesting(Cash,amount_per,date,signal,stock,buy_signal,sell_signal)`是一个简单的策略回测函数，其策略为:当`signal`高于`buy_signal`，则买入`amount_per`金额的股票；当`signal`低于`sell_signal`时，则卖出上一时刻买入的股票份数的股票。回测过程假设不存在手续费、股票份数无限可分。结果将返回一个数据框，其包含`回测日期`、`strategy`以及`baseline`三列，`strategy`列为使用策略后每天的持有的股票与现金总资产`，baseline`为一开始全仓买入标的资产后的总资产。

下面为代码示例:
```{r}
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票

start_date <- Sys.Date()
date <- seq.Date(from = start_date, by = "day", length.out = 100)

# 回测周期
signal = abs(rnorm(100,mean = 20, sd = 20)) # 信号
stock = abs(rnorm(100, mean = 10, sd = 10)) # 标的

buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果

head(result)
```
## 3 案例二相关函数
### 3.1 har_rv()
`har_rv(data,fore_L,tau)`是一个基于HAR-RV及ARMA(1,1)模型，用于预测收益率、波动率和在险价值(VaR)的函数. `data`变量为包含价格数据的数据框，每一列代表该天的高频价格数据; `fore_L`则用于确定将`data`中的后`fore_L`列作为预测对象，`tau`为VaR所用的分位数。该函数将返回一个`fore_L`行*4列的数据框，分别表示预测的收益率、已实现波动率、基于HAR-RV和ARMA(1,1)的历史滤波模拟法得到的VaR预测以及历史滤波模拟法得到的VaR预测，代码示例如下:
```{r,results='hide'}
rv_var = har_rv(moutai_data,5,0.05)
```
```{r}
rv_var
```
### 3.2 garch()
`garch(data,fore_L,tau)`是一个基于GARCH(1,1)及ARMA(1,1)模型，用于预测收益率、波动率和在险价值(VaR)的函数.  `data`变量为包含价格数据的数据框，每一列代表该天的高频价格数据; `fore_L`则用于确定将`data`中的后`fore_L`列作为预测对象，`tau`为VaR所用的分位数。该函数将返回一个`fore_L`行*3列的数据框，分别表示预测的收益率、已实现波动率、基于GARCH(1,1)和ARMA(1,1)的历史滤波模拟法得到的VaR预测，代码示例如下:
```{R,results='hide'}
rv_var = garch(moutai_data,5,0.05)
```

```{r}
rv_var
```

### 3.3 rgarch()
`rgarch(data,fore_L,tau)`是一个基于RGARCH(1,1)及ARMA(1,1)模型，用于预测收益率、波动率和在险价值(VaR)的函数.  `data`变量为包含价格数据的数据框，每一列代表该天的高频价格数据; `fore_L`则用于确定将`data`中的后`fore_L`列作为预测对象，`tau`为VaR所用的分位数。该函数将返回一个`fore_L`行*3列的数据框，分别表示预测的收益率、已实现波动率、基于RGARCH(1,1)和ARMA(1,1)的历史滤波模拟法得到的VaR预测，代码示例如下:
```{R,results='hide'}
rv_var = rgarch(moutai_data,5,0.05)
```

```{r}
rv_var
```
### 3.4 heavy()
`rgarch(data,fore_L,tau)`是一个基于HEAVY及ARMA(1,1)模型，用于预测收益率、波动率和在险价值(VaR)的函数.  `data`变量为包含价格数据的数据框，每一列代表该天的高频价格数据; `fore_L`则用于确定将`data`中的后`fore_L`列作为预测对象，`tau`为VaR所用的分位数。该函数将返回一个`fore_L`行*3列的数据框，分别表示预测的收益率、已实现波动率、基于HEAVY和ARMA(1,1)的历史滤波模拟法得到的VaR预测，代码示例如下:
```{R,results='hide',error=FALSE,warning=FALSE}
rv_var = heavy(moutai_data,5,0.05)
```

```{r}
rv_var
```
