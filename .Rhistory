if(signal[i]<=buy_signal&cash>=a){# 买入资产
cash = cash - amount_per # 花掉 a 元
num_share = amount_per/price[i] # 买入num_share份股票
gross_share = gross_share + num_share # 增加 num_share 份股票
}else if(signal[i]>=sell_signal&gross_share>=num_share){# 卖出资产
cash = cash + num_share*price[i] # 卖出num_share份资产获得现金
gross_share = gross_share - num_share
}else{
NULL
}
Asset[i] = cash + gross_share*price[i]
if(i == 1){#全部买入资产
baseline_share = cash/price[i]
Asset_baseline[i] = baseline_share * price[i]
}else{
Asset_baseline[i] = baseline_share * price[i]
}
}
result = data.frame(
'date' = date,
'strategy' = Asset,
'baseline' = Asset_baseline
)
return(result)
}
devtools::load_all(".")
??backtesting
devtools::load_all(".")
devtools::load_all(".")
?backtesting
devtools::load_all(".")
library(Case)
?backtesting
devtools::load_all(".")
?backtesting
?backtesting
devtools::load_all(".")
library(Case)
?backtesing
?backtesting
?option_data
?iVX
devtools::load_all(".")
devtools::load_all(".")
?backtesting
library(Case)
?backtesting
?iVXCalc
# 对整个包进行代码美化
styler::style_pkg()
# 初始化你的用户手册网站
usethis::use_pkgdown()
pkgdown::build_site()
head(option_data)
nrow(option_data)
head(option_data)
head(option_data)
tail(option_data)
head(option_data)
tail(option_data)
head(iVX)
head(iVX)
library(Case)
head(iVX)
head(etf50)
devtools::load_all(".")
devtools::load_all(".")
library(Case)
devtools::load_all(".")
library(Case)
head(iVX)
head(iVX)
head(iVX)
head(iVX)
head(iVX)
library(Case)
## basic example code
summary(cars)
head(option_data)
Sys.getlocale()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# 可通过github网站下载本包，然后通过RStudio进行本地安装，安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
head(option_data)
tail(option_data)
head(iVX)
nrow(iVX)
head(iVX)
tail(iVX)
nrow(iVX)
head(iVX)
head(etf50)
tail(etf50)
head(etf50)
rmarkdown::render("README.Rmd", output_format = "html_document", encoding="UTF-8")
getwd()
rmarkdown::render("myfile.Rmd", output_format = "pdf_document", encoding="UTF-8")
devtools::load_all(".")
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
head(option_data)
tail(option_data)
head(iVX)
head(etf50)
iVX_est = iVXCalc(option_data,rate = 0.04) # rate为常数，估计iVX
head(iVX_est)
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(iVX_est$date,etf50$date))))
signal = iVX_est[iVX_est$date%in%date,]$iVX_est
stock = etf50[etf50$date%in%date,]$etf50
buy_signal = 30
sell_signal = 16
backtesting(cash=cash,amount_per,date,signal,stock,buy_signal,sell_signal)
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
sell_signal = 20
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
backtesting <- function(cash, amount_per,
date,
signal, stock,
buy_signal, sell_signal) {
Asset <- rep(NA, length(signal))
Asset_baseline <- rep(NA, length(signal))
price <- stock
gross_share <- 0
for (i in 1:length(signal)) {
num_share <- amount_per / price[i] # 可买入股票的份数
# 基本策略
if (i == 1) { # 全部买入资产
baseline_share <- cash / price[i]
Asset_baseline[i] <- baseline_share * price[i]
} else {
Asset_baseline[i] <- baseline_share * price[i]
}
# 信号策略
if (signal[i] >= buy_signal & cash >= amount_per) { # 买入资产
cash <- cash - amount_per # 花掉 amout_per 元
gross_share <- gross_share + num_share # 增加 num_share 份股票
} else if (signal[i] <= sell_signal & gross_share >= num_share) { # 卖出资产
cash <- cash + num_share * price[i] # 卖出num_share份资产获得现金
gross_share <- gross_share - num_share
} else {
NULL
}
Asset[i] <- cash + gross_share * price[i]
}
result <- data.frame(
"date" = date,
"strategy" = Asset,
"baseline" = Asset_baseline
)
return(result)
}
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(iVX_est$date,etf50$date))))
signal = iVX_est[iVX_est$date%in%date,]$iVX_est
stock = etf50[etf50$date%in%date,]$etf50
buy_signal = 30
sell_signal = 20
Asset <- rep(NA, length(signal))
Asset_baseline <- rep(NA, length(signal))
price <- stock
gross_share <- 0
i=1
num_share <- amount_per / price[i] # 可买入股票的份数
# 基本策略
if (i == 1) { # 全部买入资产
baseline_share <- cash / price[i]
Asset_baseline[i] <- baseline_share * price[i]
} else {
Asset_baseline[i] <- baseline_share * price[i]
}
# 信号策略
if (signal[i] >= buy_signal & cash >= amount_per) { # 买入资产
cash <- cash - amount_per # 花掉 amout_per 元
gross_share <- gross_share + num_share # 增加 num_share 份股票
} else if (signal[i] <= sell_signal & gross_share >= num_share) { # 卖出资产
cash <- cash + num_share * price[i] # 卖出num_share份资产获得现金
gross_share <- gross_share - num_share
} else {
NULL
}
Asset[i] <- cash + gross_share * price[i]
i=2
num_share <- amount_per / price[i] # 可买入股票的份数
# 基本策略
if (i == 1) { # 全部买入资产
baseline_share <- cash / price[i]
Asset_baseline[i] <- baseline_share * price[i]
} else {
Asset_baseline[i] <- baseline_share * price[i]
}
# 信号策略
if (signal[i] >= buy_signal & cash >= amount_per) { # 买入资产
cash <- cash - amount_per # 花掉 amout_per 元
gross_share <- gross_share + num_share # 增加 num_share 份股票
} else if (signal[i] <= sell_signal & gross_share >= num_share) { # 卖出资产
cash <- cash + num_share * price[i] # 卖出num_share份资产获得现金
gross_share <- gross_share - num_share
} else {
NULL
}
Asset[i] <- cash + gross_share * price[i]
Asset[i]
signal[i] >= buy_signal
cash >= amount_per
signal[i] <= sell_signal
gross_share >= num_share
signal[i] <= sell_signal & gross_share >= num_share
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
buy_signal
amount_per
signal[i]
length(signal)
backtesting <- function(cash, amount_per,
date,
signal, stock,
buy_signal, sell_signal) {
Asset <- rep(NA, length(signal))
Asset_baseline <- rep(NA, length(signal))
price <- stock
gross_share <- 0
for (i in 1:length(signal)) {
print(i)
num_share <- amount_per / price[i] # 可买入股票的份数
# 基本策略
if (i == 1) { # 全部买入资产
baseline_share <- cash / price[i]
Asset_baseline[i] <- baseline_share * price[i]
} else {
Asset_baseline[i] <- baseline_share * price[i]
}
# 信号策略
if (signal[i] >= buy_signal & cash >= amount_per) { # 买入资产
cash <- cash - amount_per # 花掉 amout_per 元
gross_share <- gross_share + num_share # 增加 num_share 份股票
} else if (signal[i] <= sell_signal & gross_share >= num_share) { # 卖出资产
cash <- cash + num_share * price[i] # 卖出num_share份资产获得现金
gross_share <- gross_share - num_share
} else {
NULL
}
Asset[i] <- cash + gross_share * price[i]
}
result <- data.frame(
"date" = date,
"strategy" = Asset,
"baseline" = Asset_baseline
)
return(result)
}
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est$date),na.omit(etf50$date)))))
signal = iVX_est[iVX_est$date%in%date,]$iVX_est
stock = etf50[etf50$date%in%date,]$etf50
buy_signal = 30
sell_signal = 20
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
devtools::load_all(".")
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date),na.omit(etf50)$date)))
na.omit(iVX_est)$date
na.omit(etf50)$date
intersect(na.omit(iVX_est)$date),na.omit(etf50)$date))
intersect(na.omit(iVX_est)$date),na.omit(etf50)$date)
intersect(na.omit(iVX_est)$date),na.omit(etf50)$date)))
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date,na.omit(etf50)$date)))
library(lubridate)
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date,na.omit(etf50)$date))))
signal = iVX_est[iVX_est$date%in%date,]$iVX_est
stock = etf50[etf50$date%in%date,]$etf50
buy_signal = 30
sell_signal = 20
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
library(Case)
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
rm(backtesting())
rm(backtesting)
buy_signal = 30
sell_signal = 20
backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal)
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date,na.omit(etf50)$date)))) # 回测周期
signal = iVX_est[iVX_est$date%in%date,]$iVX_est # 信号
stock = etf50[etf50$date%in%date,]$etf50 # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date,na.omit(etf50)$date)))) # 回测周期
signal = iVX_est[iVX_est$date%in%date,]$iVX_est # 信号
stock = etf50[etf50$date%in%date,]$etf50 # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
head(result)
devtools::load_all(".")
library(Case)
iVX_est = iVXCalc(option_data,rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
iVX_est = iVXCalc(option_data,rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
remove.packages("Case")
devtools::load_all(".")
library(Case)
install(Case)
?case
??Case
?backtesting
setwd('E:\\')
setwd("E:/TA/案例/案例2_连续时间模型的风险管理")
# 导入配置
Root_path = 'E:\\助教\\案例\\连续时间模型的风险管理\\Project'
config_path = paste0(Root_path,'\\','config')
setwd(config_path)
# 导入配置
Root_path = 'E:\\TA\\案例\\连续时间模型的风险管理\\Project'
config_path = paste0(Root_path,'\\','config')
setwd(config_path)
paste0(Root_path,'\\','config')
library(devtools)
use_data(moutai_data)
getwd()
getwd()
load("E:/TA/案例/案例2_连续时间模型的风险管理/Project/data/data_new/moutai_data")
load("E:\\TA\\案例\\案例2_连续时间模型的风险管理\\Project\\data\\data_new\\moutai_data.RData")
use_data(moutai_data)
library(devtools)
use_data(moutai_data)
use_r()
use_r('har_rv')
use_package("forecast")
devtools::load_all(".")
moutai_data
a = har_rv(moutai_data,100,0.05)
??arima
??Arima
devtools::load_all(".")
a = har_rv(moutai_data,100,0.05)
a$return_est
use_r('garch')
devtools::load_all(".")
garch(moutai_data,10,0.05)
use_r('rgarch')
devtools::load_all(".")
rgarch(moutai_data,10,0.05)
??as.xts
devtools::load_all(".")
use_package('xts')
devtools::load_all(".")
rgarch(moutai_data,10,0.05)
use_r('heavy')
devtools::load_all(".")
heavy(moutai_data,10,0.05)
devtools::load_all(".")
heavy(moutai_data,10,0.05)
devtools::load_all(".")
devtools::load_all(".")
heavy(moutai_data,10,0.05)
warnings()
devtools::load_all(".")
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
head(option_data)
tail(option_data)
head(option_data)
head(iVX)
head(etf50)
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
head(iVX_est)
head(na.omit(iVX_est)) # 输出iVX的估计结果
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
date = as.POSIXct(ymd(as.Date.POSIXct(intersect(na.omit(iVX_est)$date,na.omit(etf50)$date)))) # 回测周期
signal = iVX_est[iVX_est$date%in%date,]$iVX_est # 信号
stock = etf50[etf50$date%in%date,]$etf50 # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
date
start_date <- Sys.Date()
date_vector <- seq.Date(from = start_date, by = "day", length.out = 100)
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
start_date <- Sys.Date()
date <- seq.Date(from = start_date, by = "day", length.out = 100)
# 回测周期
signal = rnorm(100,mean = 20, sd = 20) # 信号
stock = rnorm(100, mean = 10, sd = 10) # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
head(result)
plot(result$strategy,type = 'l')
points(result$baseline,type = 'l',col = 'red')
plot(result$strategy,type = 'l')
points(result$baseline,type = 'l',col = 'red')
signal
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
start_date <- Sys.Date()
date <- seq.Date(from = start_date, by = "day", length.out = 100)
# 回测周期
signal = abs(rnorm(100,mean = 20, sd = 20)) # 信号
stock = abs(rnorm(100, mean = 10, sd = 10)) # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
head(result)
plot(result$strategy,type = 'l')
points(result$baseline,type = 'l',col = 'red')
devtools::load_all(".")
data$交易日期
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
data = option_data
library(Case)
data=option_data
rate = 0.04
iVXCalc <- function(data, rate) {
date <- unique(data$交易日期)
View(data)
library(dplyr)
iVXCalc <- function(data, rate) {
date <- unique(data$交易日期)
View(data)
devtools::load_all(".")
devtools::load_all(".")
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
# 可通过github网站下载本包，然后通过RStudio进行本地安装
# 安装后导入即可使用其中包含的数据集及相关函数。
library(Case)
head(option_data)
head(iVX)
head(etf50)
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
head(na.omit(iVX_est)) # 输出iVX的估计结果
library(lubridate)
cash = 1000 # 初始设置为资金为1000元
amount_per = 100 # 每次买入100元的股票
start_date <- Sys.Date()
date <- seq.Date(from = start_date, by = "day", length.out = 100)
# 回测周期
signal = abs(rnorm(100,mean = 20, sd = 20)) # 信号
stock = abs(rnorm(100, mean = 10, sd = 10)) # 标的
buy_signal = 30 # 买入信号
sell_signal = 20 # 卖出信号
result = backtesting(cash,amount_per,date,signal,stock,buy_signal,sell_signal) # 策略结果
head(result)
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
head(na.omit(iVX_est)) # 输出iVX的估计结果
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
library(Case)
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
iVX_est = iVXCalc(option_data[1:10,],rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
devtools::load_all(".")
iVX_est = iVXCalc(option_data[1:100],rate = 0.04) # rate为常数，估计iVX
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
devtools::load_all(".")
library(Case)
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
iVX_est = iVXCalc(option_data[1:100,],rate = 0.04) # rate为常数，估计iVX
head(na.omit(iVX_est)) # 输出iVX的估计结果
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
head(na.omit(iVX_est)) # 输出iVX的估计结果
iVX_est = iVXCalc(option_data[1:1000,],rate = 0.04) # rate为常数，估计iVX
head(na.omit(iVX_est)) # 输出iVX的估计结果
use_README_md()
library(devtools)
use_README_md()
use_readme_rmd()
remove.packages("Case")
